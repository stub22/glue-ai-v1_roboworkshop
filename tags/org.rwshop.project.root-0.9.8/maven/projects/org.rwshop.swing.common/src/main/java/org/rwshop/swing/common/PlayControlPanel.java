/*
 * Copyright 2014 the RoboWorkshop Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * PlayControlPanel.java
 *
 * Created on Apr 27, 2011, 10:32:31 PM
 */

package org.rwshop.swing.common;

import javax.swing.Icon;
import org.jflux.api.common.rk.playable.PlayState;
import org.jflux.api.common.rk.playable.Playable;
import org.jflux.api.common.rk.playable.PlayableListener;
import org.jflux.api.common.rk.utils.TimeUtils;
import org.rwshop.swing.common.utils.SettingsRepository;

/**
 *
 * @author Matthew Stevenson <www.roboworkshop.org>
 */
public class PlayControlPanel extends javax.swing.JPanel implements PlayableListener {
    private static Icon[] theIcons = null;
    private static Icon[] getIcons(){
        if(theIcons == null){
            theIcons = SettingsRepository.getPlayIcons24();
        }
        return theIcons;
    }

    private Playable myPlayable;

    /** Creates new form PlayControlPanel */
    public PlayControlPanel() {
        initComponents();
        myPlayButton.setEnabled(false);
        myStopButton.setEnabled(false);
        if(!SettingsRepository.isInitialized()){
            return;
        }
        Icon[] icons = getIcons();
        myPlayButton.setIcon(icons[0]);
        myStopButton.setIcon(icons[3]);
    }

    /**
     *
     * @param playable
     */
    public void setPlayable(Playable playable){
        if(myPlayable != null){
            myPlayable.removePlayableListener(this);
        }
        myPlayable = playable;
        if(myPlayable != null){
            myPlayable.addPlayableListener(this);
        }
        updatePanel();
    }

    /**
     *
     */
    public void updatePanel(){
        boolean enabled = (myPlayable != null);
        myPlayButton.setEnabled(enabled);
        myStopButton.setEnabled(enabled);
        if(!enabled){
            return;
        }
        PlayState state = myPlayable.getPlayState();
        myStopButton.setEnabled(state != PlayState.COMPLETED &&
                           state != PlayState.PENDING &&
                           state != PlayState.STOPPED);
        Icon[] icons = getIcons();
        Icon play;
        switch(state){
            case PENDING:
            case COMPLETED:
            case STOPPED:
                play = icons[0]; break;
            case RUNNING:
                play = icons[1]; break;
            case PAUSED:
                play = icons[2]; break;
            default:
                play = null;
        }
        if(play != null){
            myPlayButton.setIcon(play);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myPlayButton = new javax.swing.JButton();
        myStopButton = new javax.swing.JButton();

        myPlayButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        myPlayButton.setMargin(null);
        myPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myPlayButtonActionPerformed(evt);
            }
        });

        myStopButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        myStopButton.setIconTextGap(0);
        myStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myStopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(myPlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(myStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(myPlayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void myPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myPlayButtonActionPerformed
        if(myPlayable == null){
            return;
        }
        PlayState state = myPlayable.getPlayState();
        switch(state){
            case PENDING:
            case COMPLETED:
            case STOPPED: myPlayable.start(TimeUtils.now()); break;
            case RUNNING: myPlayable.pause(TimeUtils.now()); break;
            case PAUSED: myPlayable.resume(TimeUtils.now()); break;
        }
    }//GEN-LAST:event_myPlayButtonActionPerformed

    private void myStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myStopButtonActionPerformed
        if(myPlayable == null){
            return;
        }
        myPlayable.stop(TimeUtils.now());
    }//GEN-LAST:event_myStopButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton myPlayButton;
    private javax.swing.JButton myStopButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void playStateChanged(PlayState prev, PlayState state, long time) {
        updatePanel();
    }

}
