/*
 *  Copyright 2011 by The Cogchar Project (www.cogchar.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * WavSpectrogramPanel.java
 *
 * Created on Apr 26, 2011, 12:47:34 AM
 */

package org.rwshop.swing.audio.visualization;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.beans.Beans;
import javax.swing.JComponent;
import javax.swing.ProgressMonitor;
import javax.swing.SwingUtilities;
import org.robokind.api.audio.processing.AmplitudeImage;
import org.robokind.api.audio.processing.SampleProcessor.ProcessorListener;
import org.robokind.api.audio.processing.WavProcessor;
import org.robokind.impl.audio.visualization.SpectrogramImage;
import org.rwshop.swing.common.scaling.CoordinateScalar;

/**
 *
 * @author Matthew Stevenson <matt@hansonrobokind.com>
 */
public class WavAmplitudePanel extends javax.swing.JPanel {
    private WavProcessor myWavProc;
    private AmplitudeImage myImages;
    private CoordinateScalar myScalar;
    private boolean myInitFlag;
    
    /** Creates new form WavSpectrogramPanel */
    public WavAmplitudePanel() {
        initComponents();
        myInitFlag = false;
    }
    
    public void init(WavProcessor proc, CoordinateScalar scalar){
        myScalar = scalar;
        myWavProc = proc;
        ampAsync();
    }
    
    public void ampAsync(){
        final JComponent comp = this;
        new Thread(new Runnable() {
            @Override
            public void run() {
                ProcessorPM ampPL = new ProcessorPM(comp, 
                        "Analyzing Audio", "Amplitudes", 
                        0, (int)myWavProc.getFrameCount());
                myImages = new AmplitudeImage(
                        myWavProc, myWavProc.getSamplesBufferSize()/8, 8, 256, 5);
                myImages.addProcessorListener(ampPL);
                myImages.generateImages();
                myWavProc.reset();
                
                int width = myImages.getImage(0).getWidth(null);
                final Dimension d = comp.getPreferredSize();
                d.width = width;
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        comp.setPreferredSize(d);
                        comp.revalidate();
                        comp.repaint();
                    }
                });
                myInitFlag = true;
            }
        }).start();
        
    }

    @Override
    public void paint(Graphics g){
        if(!myInitFlag){
            return;
        }
        int w = getWidth();
        int h = getHeight();
        
        g.drawImage(myImages.getImage(0),0,0,w,h,null);
    }
    
    public void setScale(double x){
        if(!myInitFlag){
            return;
        }
        if(x == myScalar.getScaleX()){
            return;
        }
        System.out.println("Scale X: " + x);
        myScalar.setScaleX(x);
        int width = myImages.getImage(0).getWidth(null);
        System.out.println("Width: " + width);
        int w = (int)myScalar.scaleX(width);
        System.out.println("W: " + w);
        w = w < 1 ? 1 : w;
        Dimension d = getPreferredSize();
        d.width = w;
        setPreferredSize(d);
        revalidate();
        repaint();
    }
    
    class ProcessorPM implements ProcessorListener{
        private ProgressMonitor myMonitor;
        
        public ProcessorPM(Component comp, 
                String title, String note, int start, int count) {
            myMonitor = new ProgressMonitor(comp, title, note, start, count);
            myMonitor.setMillisToDecideToPopup(0);
            myMonitor.setMillisToPopup(0);
        }

        @Override
        public void framesProcessed(int framesDone, int totalFrames) {
            //myMonitor.setMaximum(totalFrames);
            myMonitor.setProgress(framesDone);
            if(framesDone == totalFrames){
                myMonitor.close();
            }
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
