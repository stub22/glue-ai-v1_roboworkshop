/*
 * Copyright 2011 Hanson Robokind LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * RobotManagerPanel.java
 *
 * Created on Dec 18, 2011, 5:18:50 PM
 */
package org.rwshop.swing.motion.robot.manager;

import java.beans.IndexedPropertyChangeEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.robokind.api.motion.utils.RobotController;
import org.robokind.api.motion.utils.RobotManager;

/**
 *
 * @author Matthew Stevenson <www.robokind.org>
 */
public class RobotManagerPanel extends javax.swing.JPanel {
    private RobotManager myManager;
    private RobotControllerListModel myListModel;
    private ControllerListSelectionListener mySelectionListener;
    
    /** Creates new form RobotManagerPanel */
    public RobotManagerPanel() {
        initComponents();
        myListModel = new RobotControllerListModel();
        mySelectionListener = new ControllerListSelectionListener();
    }
    
    public void initialize(RobotManager manager){
        if(manager == null){
            throw new NullPointerException();
        }
        if(myManager != null){
            if(myManager == manager){
                return;
            }
            myManager.removePropertyChangeListener(myListModel);
            jList1.removeListSelectionListener(mySelectionListener);
        }
        myManager = manager;
        myManager.addPropertyChangeListener(myListModel);
        jList1.setModel(myListModel);
        jList1.addListSelectionListener(mySelectionListener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        robotControllerPanel1 = new org.rwshop.swing.motion.robot.manager.RobotControllerPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setRightComponent(robotControllerPanel1);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private org.rwshop.swing.motion.robot.manager.RobotControllerPanel robotControllerPanel1;
    // End of variables declaration//GEN-END:variables

    class ControllerListSelectionListener implements ListSelectionListener {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            Object src = e.getSource();
            if(!(src instanceof JList)){
                return;
            }
            JList list = (JList)src;
            Object val = list.getSelectedValue();
            if(val == null || !(val instanceof RobotController)){
                return;
            }
            RobotController selected = (RobotController)val;
            robotControllerPanel1.setRobotController(selected);
        }
    }
    
    class RobotControllerListModel 
            extends AbstractListModel implements PropertyChangeListener{
        @Override
        public int getSize() {
            if(myManager == null){
                return 0;
            }
            return myManager.getControllers().size();
        }

        @Override
        public Object getElementAt(int index) {
            if(myManager == null){
                return null;
            }
            return myManager.getControllers().get(index);
        }

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if(evt instanceof IndexedPropertyChangeEvent){
                indexedPropertyChange((IndexedPropertyChangeEvent)evt);
                return;
            }
        }
        
        private void indexedPropertyChange(IndexedPropertyChangeEvent evt){
            String prop = evt.getPropertyName();
            int i = evt.getIndex();
            if(RobotManager.PROP_ADD_ROBOT.equals(prop)){
                fireIntervalAdded(evt.getSource(), i, i);
            }else if(RobotManager.PROP_REMOVE_ROBOT.equals(prop)){
                fireIntervalRemoved(evt.getSource(), i, i);
            }
        }
    }
}
