/*
 * Copyright 2014 the RoboWorkshop Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.rwshop.nb.audio;

import org.mechio.api.audio.WavPlayer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.rwshop.swing.audio.visualization.SpectrogramPlayerPanel;
import org.rwshop.swing.common.scaling.ScalingManager;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.util.Collection;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

/**
 * Top component which displays something.
 *
 * @author Matthew Stevenson <www.roboworkshop.org>
 */
@ConvertAsProperties(dtd = "-//org.rwshop.nb.audio//AnimationMusic//EN",
		autostore = false)
public final class AnimationMusicTopComponent extends TopComponent implements LookupListener {
	private SpectrogramPlayerPanel myPanel;
	private static AnimationMusicTopComponent instance;
	/**
	 * path to the icon used by the component and its open action
	 */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
	private static final String PREFERRED_ID = "AnimationMusicTopComponent";

	public AnimationMusicTopComponent() {
		initComponents();
		myPanel = new SpectrogramPlayerPanel();
		setComponent(myPanel);
		setName(NbBundle.getMessage(AnimationMusicTopComponent.class, "CTL_AnimationMusicTopComponent"));
		setToolTipText(NbBundle.getMessage(AnimationMusicTopComponent.class, "HINT_AnimationMusicTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGap(0, 400, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGap(0, 300, Short.MAX_VALUE)
		);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables

	/**
	 * Gets default instance. Do not use directly: reserved for *.settings files only,
	 * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
	 * To obtain the singleton instance, use {@link #findInstance}.
	 */
	public static synchronized AnimationMusicTopComponent getDefault() {
		if (instance == null) {
			instance = new AnimationMusicTopComponent();
		}
		return instance;
	}

	public void init(WavPlayer player, ScalingManager sm) {
		if (player == null || sm == null) {
			return;
		}
		myPanel.init(player, sm);
	}

	/**
	 * Obtain the AnimationMusicTopComponent instance. Never call {@link #getDefault} directly!
	 */
	public static synchronized AnimationMusicTopComponent findInstance() {
		TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
		if (win == null) {
			LoggerFactory.getLogger(AnimationMusicTopComponent.class.getName()).warn(
					"Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
			return getDefault();
		}
		if (win instanceof AnimationMusicTopComponent) {
			return (AnimationMusicTopComponent) win;
		}
		LoggerFactory.getLogger(AnimationMusicTopComponent.class.getName()).warn(
				"There seem to be multiple components with the '" + PREFERRED_ID
						+ "' ID. That is a potential source of errors and unexpected behavior.");
		return getDefault();
	}

	@Override
	public int getPersistenceType() {
		return TopComponent.PERSISTENCE_NEVER;
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
	}

	Object readProperties(java.util.Properties p) {
		if (instance == null) {
			instance = this;
		}
		instance.readPropertiesImpl(p);
		return instance;
	}

	private void readPropertiesImpl(java.util.Properties p) {
		String version = p.getProperty("version");
	}

	@Override
	protected String preferredID() {
		return PREFERRED_ID;
	}

	private void setComponent(Container component) {
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(component, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(component, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);
	}

	@Override
	public void componentOpened() {
//        result = Utilities.actionsGlobalContext().lookupResult(AnimationNode.class);
//        result.allItems();
//        result.addLookupListener (this);
	}

	@Override
	public void componentClosed() {
//        result.removeLookupListener (this);
//        result = null;
	}

	@Override
	public void resultChanged(LookupEvent lookupEvent) {
		Lookup.Result r = (Lookup.Result) lookupEvent.getSource();
		Collection c = r.allInstances();
		if (!c.isEmpty()) {
//            myNode = (AnimationNode)c.iterator().next();
//            myController = myNode.getAnimationController();
//            myPanel.setController(myController);
//            myNode.registerCookies(myContent, getLookup());
		} else {
			//myTable.setController(null);
		}
	}
}
