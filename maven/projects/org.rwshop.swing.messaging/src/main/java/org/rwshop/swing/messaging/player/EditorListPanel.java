/*
 * Copyright 2013 Hanson Robokind LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.rwshop.swing.messaging.player;

import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import org.apache.avro.Schema;
import org.apache.avro.Schema.Field;
import org.apache.avro.Schema.Type;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.IndexedRecord;

/**
 *
 * @author jgpallack
 */
public class EditorListPanel extends javax.swing.JPanel {
    private List<EditorPanel> editors;
    private Schema mySchema;
    
    /**
     * Creates new form EditorListPanel
     */
    public EditorListPanel() {
        initComponents();
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        editors = new ArrayList<EditorPanel>();
    }
    
    public void addRecord(IndexedRecord record) {
        EditorPanel editor = new EditorPanel();
        
        editor.setRecord(record);
        editors.add(editor);
        add(editor);
        
        revalidate();

        try {
            ((JFrame)getTopLevelAncestor()).pack();
        } catch(Exception e) {
        }
    }
    
    public void setSchema(Schema schema) {
        mySchema = schema;
    }
    
    public void newRecord() {
        IndexedRecord record = new GenericData.Record(mySchema);

        List<Field> fields = mySchema.getFields();
        for(int i = 0; i < fields.size(); i++) {
            Field field = fields.get(i);
            Schema fieldSchema = field.schema();
            record.put(i, marshal(fieldSchema));
        }
        
        addRecord(record);
    }
    
    public List<IndexedRecord> getRecords() {
        List<IndexedRecord> records = new ArrayList<IndexedRecord>();
        
        for(EditorPanel editor: editors) {
            records.add(editor.getRecord());
        }
        
        return records;
    }
    
    public IndexedRecord getLastRecord() {
        List<IndexedRecord> records = getRecords();
        int size = records.size();
        
        return records.get(size - 1);
    }
    
    public void clear() {
        removeAll();
        editors = new ArrayList<EditorPanel>();
        
        revalidate();
        
        try {
            ((JFrame)getTopLevelAncestor()).pack();
        } catch(Exception e) {
        }
    }
    
    private Object marshal(Schema schema) {
        Type type = schema.getType();
        
        if(type == Type.STRING) {
            return "";
        } else if(type == Type.BOOLEAN) {
            return Boolean.FALSE;
        } else if(type == Type.DOUBLE) {
            return new Double(0.0);
        } else if(type == Type.FLOAT) {
            return new Float(0.0);
        } else if(type == Type.INT) {
            return new Integer(0);
        } else if(type == Type.LONG) {
            return new Long(0);
        } else if(type == Type.RECORD) {
            IndexedRecord record = new GenericData.Record(schema);
            
            List<Field> fields = schema.getFields();
            for(int i = 0; i < fields.size(); i++) {
                Field field = fields.get(i);
                Schema fieldSchema = field.schema();
                record.put(i, marshal(fieldSchema));
            }
            
            return record;
        } else if(type == Type.ARRAY) {
            return new GenericData.Array(schema, new ArrayList());
        } else {
            return new Object();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
