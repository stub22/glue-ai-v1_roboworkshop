/*
 * Copyright 2011 Hanson Robokind LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * AnimationScrollPanel.java
 *
 * Created on Feb 15, 2011, 9:50:19 PM
 */

package org.rwshop.swing.animation.timeline.scroll;

import org.rwshop.swing.common.scaling.ScalingScrollWheelListener;
import java.awt.Adjustable;
import java.awt.Dimension;
import javax.swing.border.EmptyBorder;
import org.robokind.api.animation.editor.AnimationEditor;
import org.rwshop.swing.common.scaling.LinkedScrollbarListener;
import org.rwshop.swing.common.utils.SettingsRepository;
import org.rwshop.swing.common.scaling.CoordinateScalar;
import org.rwshop.swing.common.scaling.ScalingManager;
import org.rwshop.swing.common.scaling.ScrollingScalableComponent;

/**
 *
 * @author Matthew Stevenson <www.robokind.org>
 */
public class AnimationScrollPanel extends javax.swing.JPanel {
    private AnimationEditor myController;
    private CoordinateScalar myScalar;
    private ScalingScrollWheelListener myScrollWheelListener;
    private EndlessScrollListener myScrollBarListener;
    private ScrollingScalableComponent myScalingComp;
    public boolean myInitFlag;
    private LinkedScrollbarListener myLinkedScrollListener;
    
    /** Creates new form AnimationScrollPanel */
    public AnimationScrollPanel() {
        myInitFlag = false;
        initComponents();
        myScrollBarListener = new EndlessScrollListener(15);
        myScrollWheelListener = new ScalingScrollWheelListener();
        myScrollPane.setBorder(new EmptyBorder(0, 0, 0, 0));
        myScalingComp = new ScrollingScalableComponent(myPanel, myScrollPane);
    }

    /**
     *
     * @param scalar
     */
    public void init(ScalingManager scalingManager){
        myLinkedScrollListener = new LinkedScrollbarListener(
                Adjustable.HORIZONTAL, scalingManager);
        scalingManager.addComponent(myScalingComp);
        myScrollBarListener.init(myPanel, myScrollPane);
        myScrollWheelListener.init(myScrollPane, scalingManager);
        myScrollPane.getHorizontalScrollBar().addAdjustmentListener(myLinkedScrollListener);
        myPanel.addMouseWheelListener(myScrollWheelListener);
        myScalar = scalingManager.getScalar();
        myInitFlag = true;
    }

    /**
     *
     * @param controller
     */
    public void setController(AnimationEditor controller){
        if(!myInitFlag){
            throw new IllegalStateException("Panel must be initialized before using.");
        }
        myController = controller;
        myPanel.setController(controller);
        resetSize();
    }

    /**
     *
     */
    public void resetSize(){
        if(!myInitFlag){
            return;
        }
        int w = getParent().getWidth()+1;
        if(w > 1){
            myPanel.setPreferredSize(new Dimension(w, myPanel.getPreferredSize().height));
        }
        if(myController != null){
            double length = myController.getEnd();
            double width = getWidth()-SettingsRepository.theAnimationWidthOffset;

            double scaleX = 0.2;
            if(width > 0 && length > 0){
                scaleX = width/length;
            }
            myScalar.setScaleX(scaleX);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myScrollPane = new javax.swing.JScrollPane();
        myPanel = new org.rwshop.swing.animation.timeline.AnimationTimelinePanel();

        myScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        myScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout myPanelLayout = new javax.swing.GroupLayout(myPanel);
        myPanel.setLayout(myPanelLayout);
        myPanelLayout.setHorizontalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );
        myPanelLayout.setVerticalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        myScrollPane.setViewportView(myPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(myScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.rwshop.swing.animation.timeline.AnimationTimelinePanel myPanel;
    private javax.swing.JScrollPane myScrollPane;
    // End of variables declaration//GEN-END:variables

}
