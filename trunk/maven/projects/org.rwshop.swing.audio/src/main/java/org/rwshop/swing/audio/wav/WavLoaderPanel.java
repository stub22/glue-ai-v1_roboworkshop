/*
 * Copyright 2011 Hanson Robokind LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * WavLoader.java
 *
 * Created on Sep 22, 2011, 9:57:49 AM
 */
package org.rwshop.swing.audio.wav;

import java.io.File;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.osgi.framework.BundleContext;
import org.robokind.api.animation.Animation;
import org.robokind.api.animation.xml.AnimationXML;
import org.robokind.api.audio.WavPlayer;
import org.robokind.api.common.osgi.OSGiUtils;
import org.robokind.api.common.playable.Playable;
import org.robokind.api.common.services.addon.ServiceAddOn;
import org.rwshop.swing.animation.AnimationTestFrame;
import org.rwshop.swing.audio.visualization.SpectrogramPlayerFrame;
import org.rwshop.swing.common.scaling.CoordinateScalar;
import org.rwshop.swing.common.scaling.DefaultCoordinateScalar;
import org.rwshop.swing.common.scaling.ScalingManager;

/**
 *
 * @author Matthew Stevenson <www.robokind.org>
 */
public class WavLoaderPanel extends javax.swing.JPanel {
    private final static Logger theLogger = 
            Logger.getLogger(WavLoaderPanel.class.getName());

    /** Creates new form WavLoader */
    public WavLoaderPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTextField1.setText("/home/matt/Desktop/back/test.anim");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Open");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        BundleContext context = OSGiUtils.getBundleContext(WavPlayer.class);
        /*VersionProperty serviceVer = WavBufferPlayer.VERSION;
        VersionProperty configVer = PortableWavPlayerConfig.VERSION;
        ServiceContext<WavPlayer,?,File> serviceContext = 
                ServiceConnectionDirectory.buildServiceContext(
                context, serviceVer, configVer, WavPlayer.class, File.class);
        if(serviceContext == null){
            theLogger.warning("Unable to build WavPlayer ServiceContext.");
            return;
        }
        File json = new File(jTextField1.getText());
        serviceContext.setLoadParameter(json);
        try{
            if(!serviceContext.buildService()){
                theLogger.log(Level.WARNING, "Unable to load WavPlayer.");
                return;
            }
        }catch(Exception ex){
            theLogger.log(Level.WARNING, 
                    "There was an error loading the WavPlayer.", ex);
            return;
        }
        WavPlayer player = serviceContext.getService();
        try{
            player.initAudioLine();
        }catch(Exception ex){
            theLogger.log(Level.WARNING, 
                    "There was an error opening OutputLine, "
                    + "unable to play audio.", ex);
        }*/
        Animation anim;
        try{
            anim = AnimationXML.loadAnimation(jTextField1.getText());
        }catch(Throwable ex){
            ex.printStackTrace();
            return;
        }
        List<ServiceAddOn<Playable>> addons = anim.getAddOns();
        WavPlayer player = (WavPlayer)addons.get(0).getAddOn();
        CoordinateScalar scalar = new DefaultCoordinateScalar(0.2, 400, true);
        ScalingManager scalingManager = new ScalingManager(scalar);
        AnimationTestFrame animFrame = new AnimationTestFrame();
        animFrame.init(scalingManager);
        animFrame.setVisible(true);
        SpectrogramPlayerFrame spect = new SpectrogramPlayerFrame();
        spect.init(player, scalingManager);
        spect.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jFileChooser1.setDialogTitle("Open Wav File");
        jFileChooser1.setMultiSelectionEnabled(false);
        jFileChooser1.setFileFilter(
                new FileNameExtensionFilter("json file", "json"));
        jFileChooser1.setAcceptAllFileFilterUsed(false);
        int ret = jFileChooser1.showOpenDialog(this);
        if(ret != JFileChooser.APPROVE_OPTION){
            return;
        }
        File file = jFileChooser1.getSelectedFile();
        if(file == null || !file.isFile()){
            return;
        }
        String path = file.getAbsolutePath();
        jTextField1.setText(path);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
