/*
 * Copyright 2014 the RoboWorkshop Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.rwshop.swing.motion.connection;

import javax.swing.JOptionPane;
import org.rwshop.swing.common.HistoricalComboBoxModel;

/**
 *
 * @author jgpallack
 */
public class IPPanel extends javax.swing.JPanel {
    private HistoricalComboBoxModel myModel;
    private String myIPAddress;
    
    /**
     * Creates new form IPPanel
     */
    public IPPanel() {
        initComponents();
        myModel =
                new HistoricalComboBoxModel(
                        "org.rwshop.swing.motion.connection", "ip_history",
                        "127.0.0.1");
        jComboBox1.setModel(myModel);
        jComboBox1.setEditable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("Remote robot IP?");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2))
            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String address = myModel.getSelectedItem().toString();
        
        if(validateIP(address)) {
            IPFrame ipFrame = IPFrame.getInstance();
            ipFrame.setVisible(false);
            myIPAddress = address;
        } else {
            JOptionPane.showMessageDialog(
                    this, "Invalid IP address: " + address, "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cancel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private boolean validateIP(String address) {
        String[] dotQuad = address.trim().split("\\.");
        
        if(dotQuad.length != 4) { // IP is four segments separated by .s
            return false;
        }
        
        for(String segment: dotQuad) {
            try {
                Integer segInt = Integer.parseInt(segment);
                
                if(segInt < 0 || segInt > 255) {
                    // each segment is 0-255
                    return false;
                }
            } catch(NumberFormatException e) {
                // each segment must be a valid int
                return false;
            }
        }
        
        return true;
    }
    
    String consumeIPAddress() {
        String ipAddress = myIPAddress;
        myIPAddress = null;
        
        return ipAddress;
    }
    
    void cancel() {
        IPFrame ipFrame = IPFrame.getInstance();
        ipFrame.setVisible(false);
        myIPAddress = "CANCEL";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
