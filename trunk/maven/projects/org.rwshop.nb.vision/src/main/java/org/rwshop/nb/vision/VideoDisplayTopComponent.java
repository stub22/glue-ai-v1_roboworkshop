/*
 * Copyright 2014 the RoboWorkshop Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.rwshop.nb.vision;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.slf4j.LoggerFactory;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

//import org.openide.util.ImageUtilities;

/**
 * @author Matthew Stevenson <www.roboworkshop.org>
 */
@ConvertAsProperties(dtd = "-//org.rwshop.vision//VideoDisplay//EN",
		autostore = false)
public final class VideoDisplayTopComponent extends TopComponent {

	private static VideoDisplayTopComponent instance;
	/**
	 * path to the icon used by the component and its open action
	 */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
	private static final String PREFERRED_ID = "VideoDisplayTopComponent";

	public VideoDisplayTopComponent() {
		initComponents();
		setName(NbBundle.getMessage(VideoDisplayTopComponent.class, "CTL_VideoDisplayTopComponent"));
		setToolTipText(NbBundle.getMessage(VideoDisplayTopComponent.class, "HINT_VideoDisplayTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
		myVideoControlPanel.setVideoPanel(myVideoPanel);
	}

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		myVideoPanel = new org.rwshop.swing.vision.VideoPanel();
		myVideoControlPanel = new org.rwshop.swing.vision.VideoControlPanel();

		javax.swing.GroupLayout myVideoPanelLayout = new javax.swing.GroupLayout(myVideoPanel);
		myVideoPanel.setLayout(myVideoPanelLayout);
		myVideoPanelLayout.setHorizontalGroup(
				myVideoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGap(0, 582, Short.MAX_VALUE)
		);
		myVideoPanelLayout.setVerticalGroup(
				myVideoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGap(0, 251, Short.MAX_VALUE)
		);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(myVideoControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
						.addComponent(myVideoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addComponent(myVideoControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(myVideoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private org.rwshop.swing.vision.VideoControlPanel myVideoControlPanel;
	private org.rwshop.swing.vision.VideoPanel myVideoPanel;
	// End of variables declaration//GEN-END:variables

	/**
	 * Gets default instance. Do not use directly: reserved for *.settings files only,
	 * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
	 * To obtain the singleton instance, use {@link #findInstance}.
	 */
	public static synchronized VideoDisplayTopComponent getDefault() {
		if (instance == null) {
			instance = new VideoDisplayTopComponent();
		}
		return instance;
	}

	/**
	 * Obtain the VideoDisplayTopComponent instance. Never call {@link #getDefault} directly!
	 */
	public static synchronized VideoDisplayTopComponent findInstance() {
		TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
		if (win == null) {
			LoggerFactory.getLogger(VideoDisplayTopComponent.class.getName()).warn(
					"Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
			return getDefault();
		}
		if (win instanceof VideoDisplayTopComponent) {
			return (VideoDisplayTopComponent) win;
		}
		LoggerFactory.getLogger(VideoDisplayTopComponent.class.getName()).warn(
				"There seem to be multiple components with the '" + PREFERRED_ID
						+ "' ID. That is a potential source of errors and unexpected behavior.");
		return getDefault();
	}

	@Override
	public int getPersistenceType() {
		return TopComponent.PERSISTENCE_ALWAYS;
	}

	@Override
	public void componentOpened() {
	}

	@Override
	public void componentClosed() {
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
	}

	Object readProperties(java.util.Properties p) {
		if (instance == null) {
			instance = this;
		}
		instance.readPropertiesImpl(p);
		return instance;
	}

	private void readPropertiesImpl(java.util.Properties p) {
		String version = p.getProperty("version");
	}

	@Override
	protected String preferredID() {
		return PREFERRED_ID;
	}
}
